{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseResourceName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The base name to use for the resources that will be provisioned."
      }
    },
    "botClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "botClientSecret": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "The client secret of the bot Azure AD app."
      }
    },
    "appDisplayName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "<<To Do>>",
      "metadata": {
        "description": "App display name."
      }
    },
    "appDescription": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "<<To Do>>",
      "metadata": {
        "description": "App description."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "minLength": 1,
      "maxLength": 36,
      "metadata": {
        "description": "The ID of the tenant to which the app will be deployed."
      }
    },
    "keyVaultObjectId": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
      }
    },
	"keyVaultEnabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "keyVaultEnabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "keyVaultEnabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
	"keyVaultKeysPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
	"keyVaultSecretsPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
	"keyVaultSkuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Specifies whether the key vault is a standard vault or a premium vault."
      }
    },
	"keyVaultSecretName1": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the secret that you want to create."
      }
    },
    "keyVaultSecretValue1": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the value of the secret that you want to create."
      }
    },
	"keyVaultSecretName2": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the secret that you want to create."
      }
    },
    "keyVaultSecretValue2": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the value of the secret that you want to create."
      }
    },
	"keyVaultSecretName3": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the secret that you want to create."
      }
    },
    "keyVaultSecretValue3": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the value of the secret that you want to create."
      }
    },
	"keyVaultSecretName4": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the secret that you want to create."
      }
    },
    "keyVaultSecretValue4": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the value of the secret that you want to create."
      }
    },
	"keyVaultSecretName5": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the secret that you want to create."
      }
    },
    "keyVaultSecretValue5": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the value of the secret that you want to create."
      }
    },	
    "appIconUrl": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "<<To Do>>",
      "metadata": {
        "description": "The link to the icon for the app. It must resolve to a PNG file."
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "planSize": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "defaultValue": "1",
      "metadata": {
        "description": "The size of the hosting plan (small, medium, or large)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "gitRepoUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL to the GitHub repository to deploy."
      },
      "defaultValue": "<<To Do>>"
    },
    "gitBranch": {
      "type": "string",
      "metadata": {
        "description": "The branch of the GitHub repository to deploy."
      },
      "defaultValue": "master"
    }
  },
  "variables": {
    "uniqueString": "[uniquestring(subscription().id, resourceGroup().id, parameters('baseResourceName'))]",
    "botName": "[concat('KE', parameters('baseResourceName'))]",
    "botAppName": "[concat('KE',parameters('baseResourceName'))]",
    "keyVaultName": "[concat('KE',concat(variables('botAppName'), 'vault'))]",
    "botAppDomain": "[concat('KE',concat(variables('botAppName'), '.azurewebsites.net'))]",
    "botAppUrl": "[concat('https://', variables('botAppDomain'))]",
    "hostingPlanName": "[concat('KE',parameters('baseResourceName'))]",
    "storageAccountName": "[concat('ke',variables('uniqueString'))]",
    "botAppInsightsName": "[concat('KE',parameters('baseResourceName'))]",
    "sharedSkus": [
      "Free",
      "Shared"
    ],
    "isSharedPlan": "[contains(variables('sharedSkus'), parameters('sku'))]",
    "skuFamily": "[if(equals(parameters('sku'), 'Shared'), 'D', take(parameters('sku'), 1))]"
  },
  "resources": [
    {
      "apiVersion": "2018-02-01",
      "kind": "Storage",
      "location": "[parameters('location')]",
      "name": "[variables('storageAccountName')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "2016-09-01",
      "location": "[parameters('location')]",
      "name": "[variables('hostingPlanName')]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "hostingEnvironment": "",
        "numberOfWorkers": 1
      },
      "sku": {
        "name": "[if(variables('isSharedPlan'), concat(variables('skuFamily'),'1'), concat(variables('skuFamily'),parameters('planSize')))]",
        "tier": "[parameters('sku')]",
        "size": "[concat(variables('skuFamily'), parameters('planSize'))]",
        "family": "[variables('skuFamily')]",
        "capacity": 0
      },
      "type": "Microsoft.Web/serverfarms"
    },
    {
      "apiVersion": "2016-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components/', variables('botAppInsightsName'))]"
      ],
      "kind": "app",
      "location": "[parameters('location')]",
      "name": "[variables('botAppName')]",
      "properties": {
        "name": "[variables('botAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "enabled": true,
        "reserved": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "SITE_ROLE",
              "value": "bot"
            },
            {
              "name": "MicrosoftAppIdUrl",
              "value": "[parameters('botClientId')]"
            },
            {
              "name": "MicrosoftAppPwdUrl",
              "value": "[parameters('botClientSecret')]"
            },
            {
              "name": "AzureTableStorageConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "BaseUri",
              "value": "[concat('https://', variables('botAppDomain'))]"
            },
            {
              "name": "TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components/', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "LogInsightsFlag",
              "value": "1"
            },
            {
              "name": "LuisModelId",
              "value": ""
            },
            {
              "name": "LuisSubscriptionKey",
              "value": ""
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2016-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "condition": "[not(empty(parameters('gitRepoUrl')))]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('botAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          }
        }
      ],
      "type": "Microsoft.Web/sites"
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('botAppInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botAppName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest"
      }
    },
    {
      "apiVersion": "2018-07-12",
      "kind": "sdk",
      "location": "global",
      "name": "[variables('botName')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('botAppName'))]"
      ],
      "properties": {
        "displayName": "[parameters('appDisplayName')]",
        "description": "[parameters('appDescription')]",
        "iconUrl": "[parameters('appIconUrl')]",
        "msaAppId": "[parameters('botClientId')]",
        "endpoint": "[concat(variables('botAppUrl'), '/api/messages')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "resources": [
        {
          "name": "[concat(variables('botName'), '/MsTeamsChannel')]",
          "type": "Microsoft.BotService/botServices/channels",
          "apiVersion": "2018-07-12",
          "location": "global",
          "sku": {
            "name": "F0"
          },
          "properties": {
            "channelName": "MsTeamsChannel",
            "location": "global",
            "properties": {
              "isEnabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.BotService/botServices/', variables('botName'))]"
          ]
        }
      ],
      "sku": {
        "name": "F0"
      },
      "type": "Microsoft.BotService/botServices"
    },
 {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2018-02-14",
      "tags": {
        "displayName": "KeyVault"
      },
      "properties": {
        "enabledForDeployment": "[parameters('keyVaultEnabledForDeployment')]",
        "enabledForTemplateDeployment": "[parameters('keyVaultEnabledForTemplateDeployment')]",
        "enabledForDiskEncryption": "[parameters('keyVaultEnabledForDiskEncryption')]",
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "objectId": "[parameters('keyVaultObjectId')]",
            "tenantId": "[parameters('tenantId')]",
            "permissions": {
              "keys": "[parameters('keyVaultKeysPermissions')]",
              "secrets": "[parameters('keyVaultSecretsPermissions')]"      
            }
          }
        ],
        "sku": {
          "name": "[parameters('keyVaultSkuName')]",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      }
    },
{
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', parameters('keyVaultSecretName1'))]",
      "apiVersion": "2018-02-14",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('keyVaultSecretValue1')]"
      }
    },
	{
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', parameters('keyVaultSecretName2'))]",
      "apiVersion": "2018-02-14",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('keyVaultSecretValue2')]"
      }
    },
	{
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', parameters('keyVaultSecretName3'))]",
      "apiVersion": "2018-02-14",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('keyVaultSecretValue3')]"
      }
    },
	{
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', parameters('keyVaultSecretName4'))]",
      "apiVersion": "2018-02-14",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('keyVaultSecretValue4')]"
      }
    },
	{
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', parameters('keyVaultSecretName5'))]",
      "apiVersion": "2018-02-14",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('keyVaultSecretValue5')]"
      }
    }
  ],
  "outputs": {
    "botId": {
      "type": "string",
      "value": "[parameters('botClientId')]"
    },
    "appDomain": {
      "type": "string",
      "value": "[variables('botAppDomain')]"
    }
  }
}