{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "LUISRegion": {
            "type": "string",
            "defaultValue": "westus",
            "allowedValues": [
                "brazilsouth",
                "centralindia",
                "eastasia",
                "japaneast",
                "japanwest",
                "koreacentral",
                "souteastasia",
                "canadacentral",
                "centralus",
                "eastus",
                "eastus2",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "australiaeast",
                "francecentral",
                "northeurope",
                "westeurope",
                "uksouth"
            ],
            "metadata": {
                "description": "The region where the LUIS resource will be deployed."
            }
        },
        "baseResourceName": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "The base name to use for the resources that will be provisioned."
            }
        },
        "botClientId": {
            "type": "string",
            "minLength": 36,
            "maxLength": 36,
            "metadata": {
                "description": "The client ID of the bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
            }
        },
        "botClientSecret": {
            "type": "securestring",
            "minLength": 1,
            "metadata": {
                "description": "The client secret of the bot Azure AD app."
            }
        },
        "appDisplayName": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "<<To Do>>",
            "metadata": {
                "description": "App display name."
            }
        },
        "appDescription": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "<<To Do>>",
            "metadata": {
                "description": "App description."
            }
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "minLength": 1,
            "maxLength": 36,
            "metadata": {
                "description": "The ID of the tenant to which the app will be deployed."
            }
        },
        "UPN": {
            "type": "string",
            "defaultValue": "",
            "minLength": 1,
            "maxLength": 100
        },
        "KronosWfcSuperUserName": {
            "type": "string",
            "defaultValue": "",
            "minLength": 1,
            "maxLength": 100
        },
        "KronosWfcSuperUserPwd": {
            "type": "string",
            "defaultValue": "",
            "minLength": 1,
            "maxLength": 100
        },
        "keyVaultSkuName": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
            }
        },
        "appIconUrl": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "<<To Do>>",
            "metadata": {
                "description": "The link to the icon for the app. It must resolve to a PNG file."
            }
        },
        "sku": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "The pricing tier for the hosting plan."
            }
        },
        "planSize": {
            "type": "string",
            "allowedValues": [
                "1",
                "2",
                "3"
            ],
            "defaultValue": "1",
            "metadata": {
                "description": "The size of the hosting plan (small, medium, or large)."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "uniqueString": "[uniquestring(subscription().id, resourceGroup().id, parameters('baseResourceName'))]",
        "botName": "[parameters('baseResourceName')]",
        "botAppName": "[parameters('baseResourceName')]",
        "keyVaultName": "[concat(variables('botAppName'), 'vault')]",
        "botAppDomain": "[concat(variables('botAppName'), '.azurewebsites.net')]",
        "botAppUrl": "[concat('https://', variables('botAppDomain'))]",
        "hostingPlanName": "[parameters('baseResourceName')]",
        "storageAccountName": "[variables('uniqueString')]",
        "botAppInsightsName": "[parameters('baseResourceName')]",
        "configAppName": "[concat(parameters('baseResourceName'), '-config')]",
        "configAppUrl": "[concat('https://', variables('configAppName'), '.azurewebsites.net')]",
        "botAppLUISName": "[concat(variables('botAppName'),'LUIS')]",
        "gitRepoUrl": "https://github.com/OfficeDev/Kronos-Workforce-Central-Bot",
        "gitBranch": "kronosext",
        "luisAppId": "dd6c54de-540b-415c-b086-4e75e3d5bae6",
		"luisCognitiveServices": "[concat(variables('botName'), '-luis')]",
        "sharedSkus": [
            "Free",
            "Shared"
        ],
        "isSharedPlan": "[contains(variables('sharedSkus'), parameters('sku'))]",
        "skuFamily": "[if(equals(parameters('sku'), 'Shared'), 'D', take(parameters('sku'), 1))]"
    },
    "resources": [
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "sku": {
                "name": "S0"
            },
            "kind": "LUIS",
            "name": "[concat(variables('botName'), '-luis')]",
            "apiVersion": "2016-02-01-preview",
            "location": "[parameters('LUISRegion')]",
            "scale": null,
            "properties": {},
            "dependsOn": []
        },
        {
            "apiVersion": "2018-02-01",
            "kind": "Storage",
            "location": "[parameters('location')]",
            "name": "[variables('storageAccountName')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "2016-09-01",
            "location": "[parameters('location')]",
            "name": "[variables('hostingPlanName')]",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "hostingEnvironment": "",
                "numberOfWorkers": 1
            },
            "sku": {
                "name": "[if(variables('isSharedPlan'), concat(variables('skuFamily'),'1'), concat(variables('skuFamily'),parameters('planSize')))]",
                "tier": "[parameters('sku')]",
                "size": "[concat(variables('skuFamily'), parameters('planSize'))]",
                "family": "[variables('skuFamily')]",
                "capacity": 0
            },
            "type": "Microsoft.Web/serverfarms"
        },
        {
            "apiVersion": "2016-08-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Insights/components', variables('botAppInsightsName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('luisCognitiveServices'))]"
            ],
            "kind": "app",
            "location": "[parameters('location')]",
            "name": "[variables('botAppName')]",
            "properties": {
                "name": "[variables('botAppName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "enabled": true,
                "reserved": false,
                "clientAffinityEnabled": true,
                "clientCertEnabled": false,
                "hostNamesDisabled": false,
                "containerSize": 0,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": true,
                "siteConfig": {
                    "alwaysOn": true,
                    "appSettings": [
                        {
                            "name": "SITE_ROLE",
                            "value": "bot"
                        },
                        {
                            "name": "MicrosoftAppIdUrl",
                            "value": "[concat('https://',variables('botAppName'), 'vault.vault.azure.net/secrets/MicrosoftAppIdUrl')]"
                        },
                        {
                            "name": "MicrosoftAppPwdUrl",
                            "value": "[concat('https://',variables('botAppName'), 'vault.vault.azure.net/secrets/MicrosoftAppPwdUrl')]"
                        },
                        {
                            "name": "AzureTableStorageConnectionString",
                            "value": "[concat('https://',variables('botAppName'), 'vault.vault.azure.net/secrets/AzureTableStorageConnectionString')]"
                        },
                        {
                            "name": "EncryptionKey",
                            "value": "[concat('https://',variables('botAppName'), 'vault.vault.azure.net/secrets/EncryptionKey')]"
                        },
                        {
                            "name": "EncryptionIV",
                            "value": "[concat('https://',variables('botAppName'), 'vault.vault.azure.net/secrets/EncryptionIV')]"
                        },
                        {
                            "name": "TenantMappingTable",
                            "value": "TenantMappingTable"
                        },
                        {
                            "name": "KronosUserDetails",
                            "value": "KronosUserDetails"
                        },
                        {
                            "name": "PaycodeMappingTable",
                            "value": "KronosOvertimeMapping"
                        },
                        {
                            "name": "BaseUri",
                            "value": "[concat('https://', variables('botAppDomain'))]"
                        },
                        {
                            "name": "TenantId",
                            "value": "[parameters('tenantId')]"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "6.9.5"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components/', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "LogInsightsFlag",
                            "value": "1"
                        },
                        {
                            "name": "LuisModelId",
                            "value": "[variables('luisAppId')]"
                        },
                        {
                            "name": "LuisSubscriptionKey",
                            "value": "[listKeys(variables('luisCognitiveServices'))]"
                        },
                        {
                            "name": "SuperuserUsernameUri",
                            "value": "[concat('https://',variables('botAppName'), 'vault.vault.azure.net/secrets/KronosWfcSuperUserName')]"
                        },
                        {
                            "name": "SuperuserPasswordUri",
                            "value": "[concat('https://',variables('botAppName'), 'vault.vault.azure.net/secrets/KronosWfcSuperUserPwd')]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "apiVersion": "2016-08-01",
                    "name": "web",
                    "type": "sourcecontrols",
                    "condition": "[not(empty(variables('gitRepoUrl')))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('botAppName'))]"
                    ],
                    "properties": {
                        "RepoUrl": "[variables('gitRepoUrl')]",
                        "branch": "[variables('gitBranch')]",
                        "IsManualIntegration": true
                    }
                }
            ],
            "type": "Microsoft.Web/sites"
        },
        {
            "apiVersion": "2015-05-01",
            "name": "[variables('botAppInsightsName')]",
            "type": "Microsoft.Insights/components",
            "location": "[parameters('location')]",
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botAppName'))]": "Resource"
            },
            "properties": {
                "Application_Type": "web",
                "Request_Source": "rest"
            }
        },
        {
            "apiVersion": "2018-07-12",
            "kind": "sdk",
            "location": "global",
            "name": "[variables('botName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('botAppName'))]"
            ],
            "properties": {
                "displayName": "[parameters('appDisplayName')]",
                "description": "[parameters('appDescription')]",
                "iconUrl": "[parameters('appIconUrl')]",
                "msaAppId": "[parameters('botClientId')]",
                "endpoint": "[concat(variables('botAppUrl'), '/api/messages')]",
                "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]",
                "luisAppIds": [
                    "[variables('luisAppId')]"
                ],
                "luisKey": "[listKeys(concat(variables('botName'), '-luis'), '2016-02-01-preview').key1]"
            },
            "resources": [
                {
                    "name": "[concat(variables('botName'), '/MsTeamsChannel')]",
                    "type": "Microsoft.BotService/botServices/channels",
                    "apiVersion": "2018-07-12",
                    "location": "global",
                    "sku": {
                        "name": "F0"
                    },
                    "properties": {
                        "channelName": "MsTeamsChannel",
                        "location": "global",
                        "properties": {
                            "isEnabled": true
                        }
                    },
                    "dependsOn": [
                        "[concat('Microsoft.BotService/botServices/', variables('botName'))]"
                    ]
                }
            ],
            "sku": {
                "name": "F0"
            },
            "type": "Microsoft.BotService/botServices"
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[variables('configAppName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "kind": "app",
            "properties": {
                "name": "[variables('configAppName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "enabled": true,
                "reserved": false,
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": true,
                "clientCertEnabled": false,
                "hostNamesDisabled": false,
                "containerSize": 0,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": true,
                "siteConfig": {
                    "alwaysOn": false,
                    "appSettings": [
                        {
                            "name": "SITE_ROLE",
                            "value": "configuration"
                        },
                        {
                            "name": "Tenant",
                            "value": "[parameters('tenantId')]"
                        },
                        {
                            "name": "Instance",
                            "value": "https://login.microsoftonline.com/"
                        },
                        {
                            "name": "ClientId",
                            "value": "[parameters('botClientId')]"
                        },
                        {
                            "name": "UPN",
                            "value": "[parameters('UPN')]"
                        },
                        {
                            "name": "TokenEnpoint",
                            "value": "[concat('https://login.microsoftonline.com/', parameters('tenantId'), '/oauth2/v2.0/token')]"
                        },
                        {
                            "name": "AllowedHosts",
                            "value": "*"
                        },
                        {
                            "name": "StorageConnectionString",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1, ';EndpointSuffix=core.windows.net')]"
                        },
                        {
                            "name": "KeyVaultBaseURL",
                            "value": "[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "6.9.5"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "apiVersion": "2016-08-01",
                    "name": "web",
                    "type": "sourcecontrols",
                    "condition": "[not(empty(variables('gitRepoUrl')))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('configAppName'))]"
                    ],
                    "properties": {
                        "RepoUrl": "[variables('gitRepoUrl')]",
                        "branch": "[variables('gitBranch')]",
                        "IsManualIntegration": true
                    }
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "apiVersion": "2018-02-14",
            "tags": {
                "displayName": "KeyVault"
            },
            "properties": {
                "enabledForDeployment": "true",
                "enabledForTemplateDeployment": "true",
                "enabledForDiskEncryption": "true",
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [],
                "sku": {
                    "name": "[parameters('keyVaultSkuName')]",
                    "family": "A"
                },
                "networkAcls": {
                    "value": {
                        "defaultAction": "Allow",
                        "bypass": "AzureServices"
                    }
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/MicrosoftAppIdUrl')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('botClientId')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/MicrosoftAppPwdUrl')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('botClientSecret')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/EncryptionKey')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "SDBikUjzq/00iK57fW2wnAqhma15OSl="
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/EncryptionIV')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "bki0U8Q1iQ2FPk=="
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/AzureTableStorageConnectionString')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1, ';EndpointSuffix=core.windows.net')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/KronosWfcSuperUserName')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('KronosWfcSuperUserName')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/KronosWfcSuperUserPwd')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('KronosWfcSuperUserPwd')]"
            }
        }
    ],
    "outputs": {
        "botId": {
            "type": "string",
            "value": "[parameters('botClientId')]"
        },
        "appDomain": {
            "type": "string",
            "value": "[variables('botAppDomain')]"
        }
    }
}
